From b5f4b7b273ce932654ab608ea983ca6756a41141 Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Sat, 14 Oct 2023 09:36:58 -0400
Subject: [PATCH] consumer: Fix discarded events aggregation

- Print error message if overflow is detected on 64-bit,
- Do not update the channel counter if overflow is detected on 64-bit,
  so the situation can be recovered on the next aggregation if it was
  caused by a spurious race condition,
- Change (1ULL << (CAA_BITS_PER_LONG - 1)) for (1ULL << 32), thus fixing
  an off-by-one in the shift on 32-bit.
- Use an explicit shift of 32 rather than CAA_BITS_PER_LONG to eliminate
  too-large shift warnings on 64-bit.

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Change-Id: I1a0fca2dcf6e3fe5ec37509838515545b5ee9062
---
 src/common/consumer/consumer-stream.cpp | 46 ++++++++++++++++++-------
 1 file changed, 33 insertions(+), 13 deletions(-)

diff --git a/src/common/consumer/consumer-stream.cpp b/src/common/consumer/consumer-stream.cpp
index ed19a2317..f1ea06bfc 100644
--- a/src/common/consumer/consumer-stream.cpp
+++ b/src/common/consumer/consumer-stream.cpp
@@ -97,6 +97,36 @@ static void consumer_stream_metadata_assert_locked_all(struct lttng_consumer_str
 	consumer_stream_data_assert_locked_all(stream);
 }
 
+static void aggregate_discarded_events(uint64_t *_chan_discarded_events,
+				       uint64_t *_stream_last_discarded_events,
+				       uint64_t stream_discarded_events)
+{
+	uint64_t stream_last_discarded_events = *_stream_last_discarded_events;
+	uint64_t stream_delta = 0;
+
+	if (stream_discarded_events < stream_last_discarded_events) {
+		if (CAA_BITS_PER_LONG >= 64) {
+			ERR("Unexpected events discarded counter 64-bit overflow: prev = %" PRIu64 " current = %" PRIu64,
+				stream_last_discarded_events, stream_discarded_events);
+			/*
+			 * Unexpected counter overflow: don't update the counter,
+			 * so if this is caused by a race condition, we can
+			 * recover on the next aggregation.
+			 */
+			return;
+		} else {
+			/*
+			 * A 32-bit overflow is detected. We assume only one
+			 * wrap-around has occurred.
+			 */
+			stream_delta += 1ULL << 32;
+		}
+	}
+	stream_delta += stream_discarded_events - stream_last_discarded_events;
+	*_chan_discarded_events += stream_delta;
+	*_stream_last_discarded_events = stream_discarded_events;
+}
+
 /* Only used for data streams. */
 static int consumer_stream_update_stats(struct lttng_consumer_stream *stream,
 					struct stream_subbuffer *subbuf_)
@@ -104,7 +134,6 @@ static int consumer_stream_update_stats(struct lttng_consumer_stream *stream,
 	int ret = 0;
 	uint64_t sequence_number;
 	const stream_subbuffer *subbuf = subbuf_;
-	const uint64_t discarded_events = subbuf->info.data.events_discarded;
 
 	if (!subbuf->info.data.sequence_number.is_set) {
 		/* Command not supported by the tracer. */
@@ -132,18 +161,9 @@ static int consumer_stream_update_stats(struct lttng_consumer_stream *stream,
 		goto end;
 	}
 	stream->last_sequence_number = sequence_number;
-
-	if (discarded_events < stream->last_discarded_events) {
-		/*
-		 * Overflow has occurred. We assume only one wrap-around
-		 * has occurred.
-		 */
-		stream->chan->discarded_events += (1ULL << (CAA_BITS_PER_LONG - 1)) -
-			stream->last_discarded_events + discarded_events;
-	} else {
-		stream->chan->discarded_events += discarded_events - stream->last_discarded_events;
-	}
-	stream->last_discarded_events = discarded_events;
+	aggregate_discarded_events(&stream->chan->discarded_events,
+			&stream->last_discarded_events,
+			subbuf->info.data.events_discarded);
 	ret = 0;
 
 end:
-- 
2.48.1

